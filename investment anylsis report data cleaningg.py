# -*- coding: utf-8 -*-
"""Python Script: Data Processor (data_processor.py)

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1iCo_pf-JvVYZyz_F7lp8m_ZVhRI0IrdK
"""

import pandas as pd
import numpy as np

INPUT_CSV_PATH = 'investments_VC.csv'
OUTPUT_CLEANED_CSV_PATH = 'cleaned_investments!.csv'

def load_data(file_path):
    try:
        df = pd.read_csv(file_path, encoding='latin1')
        print(f"Data loaded from {file_path}.")
        return df
    except FileNotFoundError:
        print(f"ERROR: File not found at {file_path}.")
    except Exception as e:
        print(f"ERROR: Failed to load data: {e}")
    return None

def clean_data(df):
    if df is None:
        return None

    df = df.copy()
    df.columns = df.columns.str.strip().str.lower().str.replace(' ', '_')

    if 'funding_total_usd' in df.columns:
        df['funding_total_usd'] = (
            df['funding_total_usd'].astype(str).str.replace(',', '').replace(' - ', np.nan)
        )
        df['funding_total_usd'] = pd.to_numeric(df['funding_total_usd'], errors='coerce')
        df.dropna(subset=['funding_total_usd'], inplace=True)

    if 'country_code' in df.columns:
        df.rename(columns={'country_code': 'country'}, inplace=True)
        df['country'] = df['country'].str.strip()
        df.dropna(subset=['country'], inplace=True)

    if 'category_list' in df.columns:
        df['primary_category'] = df['category_list'].astype(str).apply(
            lambda x: x.split('|')[0].strip() if '|' in x else (x.strip() if pd.notnull(x) else 'Unknown')
        ).replace({'nan': 'Unknown', '': 'Unknown'}).fillna('Unknown')

    for col in ['founded_at', 'first_funding_at', 'last_funding_at']:
        if col in df.columns:
            df[col] = pd.to_datetime(df[col], errors='coerce')
            df[col.replace('_at', '_year')] = df[col].dt.year.astype('Int64')

    if 'status' in df.columns:
        df['status'] = df['status'].fillna('unknown').str.lower()
        df['status'] = df['status'].apply(lambda x: x if x in ['operating', 'acquired', 'closed', 'ipo'] else 'unknown')

    if 'funding_rounds' in df.columns:
        df['funding_rounds'] = pd.to_numeric(df['funding_rounds'], errors='coerce')
        df.dropna(subset=['funding_rounds'], inplace=True)
        df['funding_rounds'] = df['funding_rounds'].astype(int)

    if 'name ' in df.columns and 'name' not in df.columns:
        df.rename(columns={'name ': 'name'}, inplace=True)

    if 'city' in df.columns:
        df['city'] = df['city'].str.strip()

    if 'first_funding_year' in df.columns:
        df.dropna(subset=['first_funding_year'], inplace=True)
        df['first_funding_year'] = df['first_funding_year'].astype(int)

    print(f"Data cleaned. Shape: {df.shape}")
    missing = df.isnull().sum()
    print("\nTop missing values:\n", missing[missing > 0].sort_values(ascending=False).head(10))
    return df

def perform_basic_eda(df):
    if df is None or df.empty:
        return

    print("\n--- EDA ---")

    if 'funding_total_usd' in df.columns:
        print("\nFunding USD Stats:")
        print(df['funding_total_usd'].describe())

    if 'primary_category' in df.columns:
        print("\nTop 5 Categories:")
        print(df['primary_category'].value_counts().head(5))

    if 'country' in df.columns:
        print("\nTop 5 Countries:")
        print(df['country'].value_counts().head(5))

    if 'status' in df.columns:
        print("\nCompany Status Counts:")
        print(df['status'].value_counts())

    print("\nKPI Column Availability:")
    kpis = {
        "Funding by Year": ['first_funding_year', 'funding_total_usd'],
        "Funding by Country": ['country', 'funding_total_usd'],
        "Funding by Category": ['primary_category', 'funding_total_usd'],
        "Funding by Status": ['status', 'funding_total_usd'],
        "Avg Funding per Round": ['funding_total_usd', 'funding_rounds'],
        "Investments Over Time": ['first_funding_year', 'name'],
        "Funding Distribution": ['funding_total_usd'],
        "Rounds vs. Total Funding": ['funding_rounds', 'funding_total_usd'],
        "Top Cities": ['city', 'funding_total_usd'],
        "Founding to Funding": ['founded_year', 'first_funding_year']
    }
    for kpi, cols in kpis.items():
        missing = [col for col in cols if col not in df.columns or df[col].isnull().all()]
        print(f"{kpi}: {'OK' if not missing else f'Missing {missing}'}")

if __name__ == "__main__":
    print("--- Startup Investment Data Processing ---")
    df = load_data(INPUT_CSV_PATH)

    if df is not None:
        print("\nInitial Data Snapshot:")
        print(df.head())
        df.info(verbose=True, show_counts=True)

        cleaned_df = clean_data(df)

        if cleaned_df is not None and not cleaned_df.empty:
            perform_basic_eda(cleaned_df)
            try:
                cleaned_df.to_csv(OUTPUT_CLEANED_CSV_PATH, index=False)
                print(f"\nCleaned data saved to '{OUTPUT_CLEANED_CSV_PATH}'")
            except Exception as e:
                print(f"ERROR: Failed to save cleaned data: {e}")
        else:
            print("No cleaned data available.")
    else:
        print("Data load failed.")
    print("--- Processing Complete ---")